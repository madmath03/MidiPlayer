package midi_player.frame;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Image;
import java.awt.Point;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.ActivationDataFlavor;
import javax.activation.DataHandler;
import javax.swing.ActionMap;
import javax.swing.DropMode;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import midi_player.MidiPlayer;
import midi_player.frame.action.ExitAction;
import midi_player.frame.action.LoopAction;
import midi_player.frame.action.NextAction;
import midi_player.frame.action.AddAction;
import midi_player.frame.action.PauseAction;
import midi_player.frame.action.PlayAction;
import midi_player.frame.action.PreviousAction;
import midi_player.frame.action.StopAction;
import midi_player.resources.LocaleChangeListener;
import midi_player.resources.ResourceUtils;
import midi_player.console.ConsoleFrame;
import midi_player.frame.action.ActionWrapper;
import midi_player.frame.action.ClearAction;
import midi_player.frame.action.DisplayAboutAction;
import midi_player.frame.action.DisplayConsoleAction;
import midi_player.frame.action.RemoveAction;
import midi_player.frame.action.ShufflePlaylistAction;
import midi_player.frame.action.SortPlaylistAction;
import midi_player.frame.action.ToggleControlsIconsAction;
import midi_player.frame.action.ToggleControlsLargeIconsAction;
import midi_player.frame.action.ToggleControlsNamesAction;

/**
 *
 * @author brunot
 */
public class MidiPlayerFrame extends JFrame implements LocaleChangeListener, PropertyChangeListener, ThrowableListener, AutoCloseable {

    private static final Logger LOGGER = Logger.getLogger(MidiPlayerFrame.class.getName());

    public static final String ICON_KEY = "app_icon.png";

    public static final String ICON_LABEL = "App Icon";

    /**
     * Creates new form MidiPlayerFrame.
     */
    public MidiPlayerFrame() {
        super();
        initComponents();
        setupComponents(null);
        initModel();
        initInternationalization();
    }

    /**
     * Creates new form MidiPlayerFrame.
     *
     * @param title the title for the frame
     */
    public MidiPlayerFrame(String title) {
        this(title, null);
    }

    /**
     * Creates new form MidiPlayerFrame.
     *
     * @param title the title for the frame
     * @param filesToOpen the files top open with the player
     */
    public MidiPlayerFrame(String title, List<Path> filesToOpen) {
        super(title);
        initComponents();
        setupComponents(filesToOpen);
        initModel();
        initInternationalization();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        popupMenu = new javax.swing.JPopupMenu();
        popupMenuItemRemove = new javax.swing.JMenuItem();
        popupMenuItemClear = new javax.swing.JMenuItem();
        panelControl = new javax.swing.JPanel();
        buttonPrevious = new javax.swing.JButton();
        buttonPlay = new javax.swing.JButton();
        buttonPause = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        buttonNext = new javax.swing.JButton();
        toggleButtonLoop = new javax.swing.JToggleButton();
        scrollPanePlaylist = new javax.swing.JScrollPane();
        tablePlaylist = new javax.swing.JTable();
        labelCurrentSongInformation = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemOpen = new javax.swing.JMenuItem();
        menuItemExit = new javax.swing.JMenuItem();
        menuControls = new javax.swing.JMenu();
        menuItemPrevious = new javax.swing.JMenuItem();
        menuItemPlay = new javax.swing.JMenuItem();
        menuItemPause = new javax.swing.JMenuItem();
        menuItemStop = new javax.swing.JMenuItem();
        menuItemNext = new javax.swing.JMenuItem();
        menuControlsSeparator1 = new javax.swing.JPopupMenu.Separator();
        checkBoxMenuItemLoop = new javax.swing.JCheckBoxMenuItem();
        menuItemShuffle = new javax.swing.JMenuItem();
        menuItemSort = new javax.swing.JMenuItem();
        menuControlsSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItemConsole = new javax.swing.JCheckBoxMenuItem();
        menuView = new javax.swing.JMenu();
        menuViewCheckBoxDisplayNames = new javax.swing.JCheckBoxMenuItem();
        menuViewCheckBoxDisplayIcons = new javax.swing.JCheckBoxMenuItem();
        menuViewCheckBoxDisplayLargeIcons = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("MIDI File");

        popupMenuItemRemove.setText("Remove"); // NOI18N
        popupMenu.add(popupMenuItemRemove);

        popupMenuItemClear.setText("Clear"); // NOI18N
        popupMenu.add(popupMenuItemClear);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setName("midiPlayerFrame"); // NOI18N

        panelControl.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonPrevious.setText("Previous");
        buttonPrevious.setEnabled(false);
        panelControl.add(buttonPrevious);

        buttonPlay.setText("Play");
        buttonPlay.setEnabled(false);
        panelControl.add(buttonPlay);

        buttonPause.setText("Pause");
        buttonPause.setEnabled(false);
        panelControl.add(buttonPause);

        buttonStop.setText("Stop");
        buttonStop.setEnabled(false);
        panelControl.add(buttonStop);

        buttonNext.setText("Next");
        buttonNext.setEnabled(false);
        panelControl.add(buttonNext);

        toggleButtonLoop.setText("Repeat"); // NOI18N
        toggleButtonLoop.setEnabled(false);
        panelControl.add(toggleButtonLoop);

        getContentPane().add(panelControl, java.awt.BorderLayout.PAGE_START);

        tablePlaylist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePlaylist.setDragEnabled(true);
        tablePlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablePlaylistMouseReleased(evt);
            }
        });
        scrollPanePlaylist.setViewportView(tablePlaylist);

        getContentPane().add(scrollPanePlaylist, java.awt.BorderLayout.CENTER);

        labelCurrentSongInformation.setText(" "); // NOI18N
        getContentPane().add(labelCurrentSongInformation, java.awt.BorderLayout.PAGE_END);

        menuFile.setText("File"); // NOI18N

        menuItemOpen.setText("Open"); // NOI18N
        menuFile.add(menuItemOpen);

        menuItemExit.setText("Exit"); // NOI18N
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuControls.setText("Controls"); // NOI18N

        menuItemPrevious.setText("Previous"); // NOI18N
        menuItemPrevious.setEnabled(false);
        menuControls.add(menuItemPrevious);

        menuItemPlay.setText("Play"); // NOI18N
        menuItemPlay.setEnabled(false);
        menuControls.add(menuItemPlay);

        menuItemPause.setText("Pause"); // NOI18N
        menuItemPause.setEnabled(false);
        menuControls.add(menuItemPause);

        menuItemStop.setText("Stop"); // NOI18N
        menuItemStop.setEnabled(false);
        menuControls.add(menuItemStop);

        menuItemNext.setText("Next"); // NOI18N
        menuItemNext.setEnabled(false);
        menuControls.add(menuItemNext);
        menuControls.add(menuControlsSeparator1);

        checkBoxMenuItemLoop.setText("Loop"); // NOI18N
        checkBoxMenuItemLoop.setEnabled(false);
        menuControls.add(checkBoxMenuItemLoop);

        menuItemShuffle.setText("Shuffle"); // NOI18N
        menuControls.add(menuItemShuffle);

        menuItemSort.setText("Sort"); // NOI18N
        menuControls.add(menuItemSort);
        menuControls.add(menuControlsSeparator2);

        menuItemConsole.setText("Console"); // NOI18N
        menuControls.add(menuItemConsole);

        menuBar.add(menuControls);

        menuView.setText("View"); // NOI18N

        menuViewCheckBoxDisplayNames.setText("Display controls names"); // NOI18N
        menuView.add(menuViewCheckBoxDisplayNames);

        menuViewCheckBoxDisplayIcons.setSelected(true);
        menuViewCheckBoxDisplayIcons.setText("Display controls icons"); // NOI18N
        menuView.add(menuViewCheckBoxDisplayIcons);

        menuViewCheckBoxDisplayLargeIcons.setText("Display controls large icons"); // NOI18N
        menuView.add(menuViewCheckBoxDisplayLargeIcons);

        menuBar.add(menuView);

        menuHelp.setText("Help"); // NOI18N

        menuItemAbout.setText("About"); // NOI18N
        menuHelp.add(menuItemAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void tablePlaylistMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePlaylistMouseReleased
        if (evt.isPopupTrigger()) {
            doPop(evt);
        }
    }//GEN-LAST:event_tablePlaylistMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPause;
    private javax.swing.JButton buttonPlay;
    private javax.swing.JButton buttonPrevious;
    private javax.swing.JButton buttonStop;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemLoop;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel labelCurrentSongInformation;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuControls;
    private javax.swing.JPopupMenu.Separator menuControlsSeparator1;
    private javax.swing.JPopupMenu.Separator menuControlsSeparator2;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JCheckBoxMenuItem menuItemConsole;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemNext;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JMenuItem menuItemPause;
    private javax.swing.JMenuItem menuItemPlay;
    private javax.swing.JMenuItem menuItemPrevious;
    private javax.swing.JMenuItem menuItemShuffle;
    private javax.swing.JMenuItem menuItemSort;
    private javax.swing.JMenuItem menuItemStop;
    private javax.swing.JMenu menuView;
    private javax.swing.JCheckBoxMenuItem menuViewCheckBoxDisplayIcons;
    private javax.swing.JCheckBoxMenuItem menuViewCheckBoxDisplayLargeIcons;
    private javax.swing.JCheckBoxMenuItem menuViewCheckBoxDisplayNames;
    private javax.swing.JPanel panelControl;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem popupMenuItemClear;
    private javax.swing.JMenuItem popupMenuItemRemove;
    private javax.swing.JScrollPane scrollPanePlaylist;
    private javax.swing.JTable tablePlaylist;
    private javax.swing.JToggleButton toggleButtonLoop;
    // End of variables declaration//GEN-END:variables

    // #########################################################################
    private DefaultTableModel playlistDataModel;
    private ConsoleFrame consoleFrame;
    private MidiPlayerWithListener player;
    private MidiPlayerController controller;

    private midi_player.frame.action.util.ActionFactory midiActionFactory;

    private boolean displayControlsButtonIcons = true;
    private boolean displayControlsButtonLargeIcons = false;
    private boolean displayControlsButtonNames = false;

    // #########################################################################
    public ConsoleFrame getConsoleFrame() {
        if (consoleFrame == null) {
            consoleFrame = new ConsoleFrame(null, midi_player.console.resources.ResourceUtils.getMessage("midi_player.console.title"));
            consoleFrame.setVisible(false);

            List<Image> frameIcons = ResourceUtils.createImages("application_xp_terminal.png", "Console");
            if (frameIcons != null) {
                consoleFrame.setIconImages(frameIcons);
            }

            ResourceUtils.addLocaleChangeListener(consoleFrame);
        }
        return consoleFrame;
    }

    // #########################################################################
    public MidiPlayerWithListener getPlayer() {
        if (player == null) {
            player = MidiPlayerWithListener.getInstance();
            player.addPropertyChangeListener(this);
            player.addExceptionListener(this);
        }
        return player;
    }

    // #########################################################################
    public MidiPlayerController getController() {
        if (controller == null) {
            ConsoleFrame console = getConsoleFrame();
            controller = new MidiPlayerController(console.getJssTextArea(), this, this.getPlayer());
            console.setController(controller);
        }
        return controller;
    }

    // #########################################################################
    private void setupComponents(List<Path> filesToOpen) {
        // Set frame icons
        List<Image> frameIcons = ResourceUtils.createImages(ICON_KEY, ICON_LABEL);
        if (frameIcons != null) {
            this.setIconImages(frameIcons);
        }

        final MidiPlayerWithListener midiPlayer = this.getPlayer();
        if (midiPlayer == null || midiPlayer.getSequencer() == null) {
            this.throwableReceived(ResourceUtils.getMessage("midi_player.sequencer.not_found"));
            System.exit(1);
        }
        final MidiPlayerController midiPlayerController = this.getController();
        midiActionFactory = new midi_player.frame.action.util.ActionFactory(midiPlayerController);

        // Load files and initialize components from received paths
        File directory;
        if (filesToOpen != null && !filesToOpen.isEmpty()) {
            midiPlayer.addAll(filesToOpen);
            directory = filesToOpen.get(filesToOpen.size() - 1).getParent().toFile();
        } else {
            directory = null;
        }

        // Set current directory
        fileChooser.setCurrentDirectory(directory);

        // Retrieve actions that hold frame's properties to update
        ToggleControlsNamesAction toggleControlsNamesAction = (ToggleControlsNamesAction) midiActionFactory.getAction(ToggleControlsNamesAction.DEFAULT_IDENTIFIER);
        this.displayControlsButtonNames = toggleControlsNamesAction.isSelected();
        ToggleControlsIconsAction toggleControlsIconsAction = (ToggleControlsIconsAction) midiActionFactory.getAction(ToggleControlsIconsAction.DEFAULT_IDENTIFIER);
        this.displayControlsButtonIcons = toggleControlsIconsAction.isSelected();
        ToggleControlsLargeIconsAction toggleControlsLargeIconsAction = (ToggleControlsLargeIconsAction) midiActionFactory.getAction(ToggleControlsLargeIconsAction.DEFAULT_IDENTIFIER);
        this.displayControlsButtonLargeIcons = toggleControlsLargeIconsAction.isSelected();

        DisplayConsoleAction displayConsoleAction = (DisplayConsoleAction) midiActionFactory.getAction(DisplayConsoleAction.DEFAULT_IDENTIFIER);
        menuItemConsole.setAction(displayConsoleAction);
        getConsoleFrame().setVisible(displayConsoleAction.isSelected());

        // File Actions
        AddAction openAction = (AddAction) midiActionFactory.getAction(AddAction.DEFAULT_IDENTIFIER);
        menuItemOpen.setAction(openAction);

        final ExitAction exitAction = (ExitAction) midiActionFactory.getAction(ExitAction.DEFAULT_IDENTIFIER);
        menuItemExit.setAction(exitAction);

        // Call exit action on OS close button
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                exitAction.run();
            }

        });

        // Control Actions
        PreviousAction previousAction = (PreviousAction) midiActionFactory.getAction(PreviousAction.DEFAULT_IDENTIFIER);
        ActionWrapper wrappedPreviousAction = new ActionWrapper(previousAction, displayControlsButtonNames, displayControlsButtonIcons, displayControlsButtonLargeIcons);
        buttonPrevious.setAction(wrappedPreviousAction);
        menuItemPrevious.setAction(previousAction);

        final PlayAction playAction = (PlayAction) midiActionFactory.getAction(PlayAction.DEFAULT_IDENTIFIER);
        ActionWrapper wrappedPlayAction = new ActionWrapper(playAction, displayControlsButtonNames, displayControlsButtonIcons, displayControlsButtonLargeIcons);
        buttonPlay.setAction(wrappedPlayAction);
        menuItemPlay.setAction(playAction);

        // Start playing song on double click in list
        tablePlaylist.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                if (me.getSource() instanceof JTable) {
                    JTable table = (JTable) me.getSource();
                    Point p = me.getPoint();
                    int row = table.rowAtPoint(p);
                    if (me.getClickCount() == 2) {
                        playAction.actionPerformed(new ActionEvent(me.getSource(), me.getID(), Integer.toString(row)));
                    }
                }
            }
        });

        PauseAction pauseAction = (PauseAction) midiActionFactory.getAction(PauseAction.DEFAULT_IDENTIFIER);
        ActionWrapper wrappedPauseAction = new ActionWrapper(pauseAction, displayControlsButtonNames, displayControlsButtonIcons, displayControlsButtonLargeIcons);
        buttonPause.setAction(wrappedPauseAction);
        menuItemPause.setAction(pauseAction);

        StopAction stopAction = (StopAction) midiActionFactory.getAction(StopAction.DEFAULT_IDENTIFIER);
        ActionWrapper wrappedStopAction = new ActionWrapper(stopAction, displayControlsButtonNames, displayControlsButtonIcons, displayControlsButtonLargeIcons);
        buttonStop.setAction(wrappedStopAction);
        menuItemStop.setAction(stopAction);

        NextAction nextAction = (NextAction) midiActionFactory.getAction(NextAction.DEFAULT_IDENTIFIER);
        ActionWrapper wrappedNextAction = new ActionWrapper(nextAction, displayControlsButtonNames, displayControlsButtonIcons, displayControlsButtonLargeIcons);
        buttonNext.setAction(wrappedNextAction);
        menuItemNext.setAction(nextAction);

        LoopAction loopAction = (LoopAction) midiActionFactory.getAction(LoopAction.DEFAULT_IDENTIFIER);
        ActionWrapper wrappedLoopAction = new ActionWrapper(loopAction, displayControlsButtonNames, displayControlsButtonIcons, displayControlsButtonLargeIcons);
        toggleButtonLoop.setAction(wrappedLoopAction);
        checkBoxMenuItemLoop.setAction(loopAction);

        ShufflePlaylistAction shufflePlaylistAction = (ShufflePlaylistAction) midiActionFactory.getAction(ShufflePlaylistAction.DEFAULT_IDENTIFIER);
        menuItemShuffle.setAction(shufflePlaylistAction);

        SortPlaylistAction sortPlaylistAction = (SortPlaylistAction) midiActionFactory.getAction(SortPlaylistAction.DEFAULT_IDENTIFIER);
        menuItemSort.setAction(sortPlaylistAction);

        menuViewCheckBoxDisplayNames.setAction(toggleControlsNamesAction);
        menuViewCheckBoxDisplayIcons.setAction(toggleControlsIconsAction);
        menuViewCheckBoxDisplayLargeIcons.setAction(toggleControlsLargeIconsAction);

        DisplayAboutAction displayAboutAction = (DisplayAboutAction) midiActionFactory.getAction(DisplayAboutAction.DEFAULT_IDENTIFIER);
        menuItemAbout.setAction(displayAboutAction);

        // Remove song from list on delete key
        int condition = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
        InputMap inputMap = tablePlaylist.getInputMap(condition);
        ActionMap actionMap = tablePlaylist.getActionMap();
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "RemoveSongFromPlaylist");
        RemoveAction removeAction = (RemoveAction) midiActionFactory.getAction(RemoveAction.DEFAULT_IDENTIFIER);
        actionMap.put("RemoveSongFromPlaylist", removeAction);
        popupMenuItemRemove.setAction(removeAction);

        ClearAction clearAction = (ClearAction) midiActionFactory.getAction(ClearAction.DEFAULT_IDENTIFIER);
        popupMenuItemClear.setAction(clearAction);

        // Define a custom renderer for displaying current song
        SongPathRenderer songPathRenderer = new SongPathRenderer(midiPlayer, tablePlaylist);
        tablePlaylist.setDefaultRenderer(Object.class, songPathRenderer);
        this.getPlayer().addPropertyChangeListener(songPathRenderer);

        // Handle Drag and Drop to reorder
        tablePlaylist.setDragEnabled(true);
        tablePlaylist.setDropMode(DropMode.INSERT_ROWS);
        TransferHandler transferHandler = new TableRowsAndFilesTransferHandler(tablePlaylist, scrollPanePlaylist);
        tablePlaylist.setTransferHandler(transferHandler);

        // Handle Drag and Drop from OS
        scrollPanePlaylist.setTransferHandler(transferHandler);
    }

    public final void initModel() {
        MidiPlayer midiPlayer = this.getPlayer();

        if (midiPlayer instanceof TableModel) {
            tablePlaylist.setModel((TableModel) midiPlayer);
            tablePlaylist.setAutoCreateColumnsFromModel(true);
            if (midiPlayer instanceof LocaleChangeListener) {
                ResourceUtils.addLocaleChangeListener((LocaleChangeListener) midiPlayer);
            }
        } else {
            Object[] columnNames = {"Title"};
            if (midiPlayer == null || midiPlayer.getPlaylist().isEmpty()) {
                playlistDataModel = new DefaultTableModel(columnNames, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }

                };
                tablePlaylist.setModel(playlistDataModel);
            } else {
                Object[] playlistPaths = player.getPlaylist().toArray();
                Object[][] rows = new Object[playlistPaths.length][1];
                for (int i = 0, n = playlistPaths.length; i < n; i++) {
                    Object path = playlistPaths[i];
                    rows[i][0] = path;
                }
                playlistDataModel = new DefaultTableModel(rows, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }

                };
                tablePlaylist.setModel(playlistDataModel);
            }
        }
    }

    /**
     * Get playlist table model.
     *
     * @return playlist table model.
     */
    public DefaultTableModel getPlaylistDataModel() {
        return playlistDataModel;
    }

    // #########################################################################
    private void initInternationalization() {
        ResourceUtils.setTextAndMnemonic(menuFile, "midi_player.menu.file.text");
        ResourceUtils.setTextAndMnemonic(menuControls, "midi_player.menu.controls.text");
        ResourceUtils.setTextAndMnemonic(menuView, "midi_player.menu.view.text");
        ResourceUtils.setTextAndMnemonic(menuHelp, "midi_player.menu.help.text");
    }

    // #########################################################################
    private void doPop(java.awt.event.MouseEvent e) {
        // TODO Display a popup on table header for sorting and shuffle
        popupMenu.show(e.getComponent(), e.getX(), e.getY());
    }

    // #########################################################################
    public boolean isDisplayControlsButtonIcons() {
        return displayControlsButtonIcons;
    }

    public boolean isDisplayControlsButtonLargeIcons() {
        return displayControlsButtonLargeIcons;
    }

    public boolean isDisplayControlsButtonNames() {
        return displayControlsButtonNames;
    }

    public JButton getButtonNext() {
        return buttonNext;
    }

    public JButton getButtonPause() {
        return buttonPause;
    }

    public JButton getButtonPlay() {
        return buttonPlay;
    }

    public JButton getButtonPrevious() {
        return buttonPrevious;
    }

    public JButton getButtonStop() {
        return buttonStop;
    }

    public JToggleButton getToggleButtonLoop() {
        return toggleButtonLoop;
    }

    public JCheckBoxMenuItem getCheckBoxMenuItemLoop() {
        return checkBoxMenuItemLoop;
    }

    public JFileChooser getFileChooser() {
        return fileChooser;
    }

    public JMenu getMenuControls() {
        return menuControls;
    }

    public JPopupMenu.Separator getMenuControlsSeparator1() {
        return menuControlsSeparator1;
    }

    public JPopupMenu.Separator getMenuControlsSeparator2() {
        return menuControlsSeparator2;
    }

    public JMenu getMenuFile() {
        return menuFile;
    }

    public JMenu getMenuHelp() {
        return menuHelp;
    }

    public JMenuItem getMenuItemAbout() {
        return menuItemAbout;
    }

    public JCheckBoxMenuItem getMenuItemConsole() {
        return menuItemConsole;
    }

    public JMenuItem getMenuItemExit() {
        return menuItemExit;
    }

    public JMenuItem getMenuItemNext() {
        return menuItemNext;
    }

    public JMenuItem getMenuItemOpen() {
        return menuItemOpen;
    }

    public JMenuItem getMenuItemPause() {
        return menuItemPause;
    }

    public JMenuItem getMenuItemPlay() {
        return menuItemPlay;
    }

    public JMenuItem getMenuItemPrevious() {
        return menuItemPrevious;
    }

    public JMenuItem getMenuItemStop() {
        return menuItemStop;
    }

    public JPanel getPanelControl() {
        return panelControl;
    }

    public JScrollPane getScrollPanePlaylist() {
        return scrollPanePlaylist;
    }

    public JTable getTablePlaylist() {
        return tablePlaylist;
    }

    // #########################################################################
    @Override
    public void localeChanged() {
        localeChanged(null);
    }

    @Override
    public void localeChanged(PropertyChangeEvent evt) {
        initInternationalization();
    }

    // #########################################################################
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt == null) {
            return;
        }

        Object newValue = evt.getNewValue();
        switch (evt.getPropertyName()) {
            case MidiPlayerWithListener.CURRENT_SONG_CHANGE:
                String newCurrentSongInfo = getPlayer().getCurrentSongInfo();
                if (newCurrentSongInfo != null && !newCurrentSongInfo.isEmpty()) {
                    labelCurrentSongInformation.setText(newCurrentSongInfo);
                }
                break;
            case MidiPlayerWithListener.PLAYING_START_CHANGE:
                if (newValue instanceof Boolean && ((Boolean) newValue)) {
                    int nbTry = 0;
                    while (nbTry < 10) {
                        String currentSongInfo = getPlayer().getCurrentSongInfo();
                        System.out.println(nbTry + ". midi_player.frame.MidiPlayerFrame.propertyChange():currentSongInfo=" + currentSongInfo);
                        if (currentSongInfo != null && !currentSongInfo.isEmpty()) {
                            labelCurrentSongInformation.setText(currentSongInfo);
                            break;
                        } else {
                            // Wait a bit and retry
                            try {
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                LOGGER.log(Level.SEVERE, null, ex);
                            }
                            nbTry++;
                        }
                    }
                }
                break;
            case MidiPlayerWithListener.PLAYING_STOP_CHANGE:
                if (newValue instanceof Boolean && ((Boolean) newValue)) {
                    labelCurrentSongInformation.setText("Current Song");
                }
                break;
        }
    }

    // #########################################################################
    @Override
    public void throwableReceived(String msg, Throwable thrown) {
        StringBuilder errorMessageBuilder = new StringBuilder();
        if (msg != null) {
            errorMessageBuilder.append("<strong>").append(msg).append(".</strong><br/>");
        }
        if (thrown != null && thrown.getMessage() != null) {
            errorMessageBuilder.append("<p>")
                    .append(thrown.getClass()).append(":<br/>")
                    .append(thrown.getLocalizedMessage()).append("</p>");
        }
        String errorMessage = errorMessageBuilder.toString();
        if (errorMessage.isEmpty()) {
            // TODO Translate!!
            errorMessage = "Unknown error occurred!";
        } else {
            errorMessage = "<html><body>" + errorMessage + "</body></html>";
        }

        // Display error message
        JOptionPane.showMessageDialog(this,
                errorMessage,
                ResourceUtils.getMessage("midi_player.message_dialog.title.error"),
                JOptionPane.ERROR_MESSAGE);
    }

    // #########################################################################
    @Override
    public void close() throws Exception {
        this.dispose();
        if (player != null) {
            player.close();
            player = null;
        }
    }

    // #########################################################################
    static class SongPathRenderer extends DefaultTableCellRenderer implements PropertyChangeListener {

        public static final DefaultTableCellRenderer DEFAULT_RENDERER = new DefaultTableCellRenderer();

        private final MidiPlayer midiPlayer;

        private final JTable table;

        private Color playingSongForeground = Color.YELLOW.darker();

        private Color playingSongBackground = null;

        public SongPathRenderer(MidiPlayer midiPlayer, JTable table) {
            super();
            if (midiPlayer == null) {
                throw new IllegalArgumentException("Midi player controller is null");
            }
            this.midiPlayer = midiPlayer;
            if (table == null) {
                throw new IllegalArgumentException("Table is null");
            }
            this.table = table;
        }

        public Color getPlayingSongForeground() {
            return playingSongForeground;
        }

        public void setPlayingSongForeground(Color playingSongForeground) {
            this.playingSongForeground = playingSongForeground;
        }

        public Color getPlayingSongBackground() {
            return playingSongBackground;
        }

        public void setPlayingSongBackground(Color playingSongBackground) {
            this.playingSongBackground = playingSongBackground;
        }

        public Component getTableCellRendererComponent(
                JTable table, Object o,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            if (table != this.table) {
                return this;
            }
            Component renderer = super.getTableCellRendererComponent(table,
                    o, isSelected, hasFocus, row, column);
            Component defaultRenderer = DEFAULT_RENDERER.getTableCellRendererComponent(table,
                    o, isSelected, hasFocus, row, column);

            Color foreground, background;
            if (midiPlayer.getCurrentSongIndex() == row) {
                foreground = this.playingSongForeground != null
                        ? this.playingSongForeground : defaultRenderer.getForeground();
                background = this.playingSongBackground != null
                        ? this.playingSongBackground : defaultRenderer.getBackground();
                if (isSelected) {
                    foreground = foreground.brighter();
                }
                // Italic font if song is playing
                Font f = defaultRenderer.getFont();
                if (midiPlayer.isPlaying()) {
                    f = f.deriveFont(Font.ITALIC);
                }
                renderer.setFont(f);
            } else {
                foreground = defaultRenderer.getForeground();
                background = defaultRenderer.getBackground();
            }
            renderer.setBackground(background);
            renderer.setForeground(foreground);

            return renderer;
        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            System.out.println("midi_player.frame.MidiPlayerFrame.SongPathRenderer.propertyChange(" + evt + ")");
            this.table.invalidate();
            this.table.repaint();
        }
    }

    // #########################################################################
    /**
     * Handles drag & drop for rows reordering and files import.
     *
     * @see
     * http://stackoverflow.com/questions/638807/how-do-i-drag-and-drop-a-row-in-a-jtable
     * @see
     * http://stackoverflow.com/questions/811248/how-can-i-use-drag-and-drop-in-swing-to-get-file-path
     */
    static class TableRowsAndFilesTransferHandler extends TransferHandler {

        private static final Logger LOGGER = Logger.getLogger(TableRowsAndFilesTransferHandler.class.getName());

        private final DataFlavor filesFlavor = DataFlavor.javaFileListFlavor;

        /**
         * The MIME type of the data represented by the flavor.
         */
        private static final String ROWS_FLAVOR_MIME_TYPE = "application/x-java-Array;class=java.lang.reflect.Array";

        /**
         * The human presentable name of the flavor.
         */
        private static final String ROWS_FLAVOR_DESCRIPTION = "Integer Rows Index";

        private final DataFlavor rowsIndexFlavor = new ActivationDataFlavor(int[].class, ROWS_FLAVOR_MIME_TYPE, ROWS_FLAVOR_DESCRIPTION);

        /**
         * The table expected as drop target. Also used as the drag source.
         */
        private JTable table = null;

        /**
         * A container allowed as a drop target. If the drop occurs on this
         * container, drop will occur in table.
         */
        private JComponent container = null;

        public TableRowsAndFilesTransferHandler(JTable table) {
            this(table, null);
        }

        public TableRowsAndFilesTransferHandler(JTable table, JComponent container) {
            this.table = table;
            this.container = container;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            assert (c == table);
            return new DataHandler(table.getSelectedRows(), rowsIndexFlavor.getMimeType());
        }

        @Override
        public boolean canImport(TransferHandler.TransferSupport info) {
            boolean b = (info.getComponent() == table || info.getComponent() == container)
                    && info.isDrop()
                    && (info.isDataFlavorSupported(rowsIndexFlavor) || info.isDataFlavorSupported(filesFlavor));
            table.setCursor(b ? DragSource.DefaultMoveDrop : DragSource.DefaultMoveNoDrop);
            return b;
        }

        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.COPY_OR_MOVE;
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport info) {
            TableModel model = table.getModel();
            if (!(model instanceof ReorderableTableModel) || !info.isDrop()) {
                return false;
            }
            Component component = info.getComponent();
            JTable target;
            if (component instanceof JTable) {
                target = (JTable) info.getComponent();
            } else if (info.getComponent() == container) {
                target = table;
            } else {
                return false;
            }
            target.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            DropLocation dropLocation = info.getDropLocation();
            int index = -1;
            if (dropLocation instanceof JTable.DropLocation) {
                JTable.DropLocation dl = (JTable.DropLocation) info.getDropLocation();
                index = dl.getRow();
            }

            int max = table.getModel().getRowCount();
            if (index < 0 || index > max) {
                index = max;
            }

            Transferable transferable = info.getTransferable();
            if (info.isDataFlavorSupported(rowsIndexFlavor) && model instanceof ReorderableTableModel) {
                int[] rows;
                try {
                    rows = (int[]) transferable.getTransferData(rowsIndexFlavor);
                } catch (UnsupportedFlavorException ex) {
                    LOGGER.log(Level.SEVERE, rowsIndexFlavor + " flavor is not supported.", ex);
                    rows = null;
                } catch (IOException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                    rows = null;
                }

                return transferRows((ReorderableTableModel) model, target, index, rows);
            } else if (info.isDataFlavorSupported(filesFlavor) && model instanceof MidiPlayerWithListener) {
                List<File> files;
                try {
                    files = (List<File>) transferable.getTransferData(filesFlavor);
                } catch (UnsupportedFlavorException ex) {
                    LOGGER.log(Level.SEVERE, filesFlavor + " flavor is not supported.", ex);
                    files = null;
                } catch (IOException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                    files = null;
                }

                return transferFiles((MidiPlayerWithListener) model, target, index, files);
            } else {
                return false;
            }
        }

        private boolean transferRows(ReorderableTableModel model, JTable target, int index, int[] rows) {
            // Is selection continuous?
            boolean continuousSelection;
            int selectedRow;
            int selectedRowsStart = -1, selectedRowsEnd = -1, selectionSize = 0;
            if (rows != null && rows.length > 0) {
                selectedRow = rows[0];
                continuousSelection = true;
                for (int i = 1, n = rows.length, previousRow = selectedRow, currentRow; i < n && continuousSelection; i++) {
                    currentRow = rows[i];
                    if (currentRow == previousRow + 1) {
                        previousRow = currentRow;
                    } else {
                        // If current row index is not right after previous
                        continuousSelection = false;
                    }
                }

                // Define selection limits
                if (continuousSelection) {
                    selectedRowsStart = selectedRow;
                    selectedRowsEnd = rows[rows.length - 1];
                    selectionSize = selectedRowsEnd - selectedRowsStart;
                } else {
                    // Only move the first element if non continuous selection
                    selectedRowsStart = selectedRow;
                    selectedRowsEnd = selectedRow;
                    selectionSize = 1;
                }
            }

            // If selection and destination are valid
            if (selectedRowsStart != -1 && (index < selectedRowsStart || index > selectedRowsEnd + 1)) {
                model.moveRow(selectedRowsStart, selectedRowsEnd, index);
                if (index > selectedRowsEnd) {
                    index -= 1 + selectionSize;
                }
                target.getSelectionModel().addSelectionInterval(index, index + selectionSize);
                return true;
            }

            return false;
        }

        private boolean transferFiles(MidiPlayerWithListener model, JTable target, int index, List<File> files) {
            if (files != null && !files.isEmpty()) {
                List<Path> paths = new ArrayList<>(files.size());

                // Loop through files and convert to paths
                files.stream().map((file) -> file.toPath()).forEach((path) -> {
                    paths.add(path);
                });

                // Add all files to the playlist
                if (model.addAll(index, paths)) {
                    target.getSelectionModel().addSelectionInterval(index, index + paths.size() - 1);
                    return true;
                }

            }
            return false;
        }

        @Override
        protected void exportDone(JComponent c, Transferable t, int act) {
            if ((act == TransferHandler.MOVE) || (act == TransferHandler.NONE)) {
                table.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }
}
